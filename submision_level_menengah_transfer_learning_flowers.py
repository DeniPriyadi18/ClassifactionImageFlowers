# -*- coding: utf-8 -*-
"""SUBMISION LEVEL MENENGAH-TRANSFER LEARNING FLOWERS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VDsYiRCBy6hcL3tzTeQhVDnLh60LDckS

<h1> NAMA : DENI PRIYADI <br>
<h1> ALAMAT : KABUPATEN MAJALENGKA
"""

!pip install -q kaggle
!mkdir ~/.kaggle
!cp kaggle.json ~/.kaggle
!chmod 600 ~/.kaggle/kaggle.json
!kaggle datasets download -d 'nadyana/flowers'

!pip install keras_preprocessing
!pip install split-folders

import zipfile
import os
import splitfolders
import pathlib
import tensorflow as tf
import matplotlib.pyplot as plt
import keras
import keras_preprocessing
from PIL import Image
from keras_preprocessing.image import ImageDataGenerator
from sklearn.model_selection import train_test_split
from keras.layers import Input
from keras.applications import Xception, ResNet152V2

target_file = '/content/flowers.zip'
extracting = zipfile.ZipFile(target_file, 'r')
extracting.extractall('/content/flowers')
extracting.close()

dataset_dir = '/content/flowers/flowers'
classes = os.listdir(dataset_dir)
plt.figure(figsize=(30, 20))

for i, class_name in enumerate(classes):
    class_dir = os.path.join(dataset_dir, class_name)
    img_paths = [os.path.join(class_dir, img) for img in os.listdir(class_dir)[:3]]  # Mengambil 3 gambar pertama dari setiap kelas

    for j, img_path in enumerate(img_paths):
        img = Image.open(img_path)
        plt.subplot(len(classes), 3, i * 3 + j + 1)
        plt.imshow(img)
        plt.title(class_name)
        plt.axis("off")

plt.show()

splitfolders.ratio(dataset_dir, output=dataset_dir, seed=1337, ratio=(0.8, 0.2))

train_dir = os.path.join(dataset_dir, 'train')
validation_dir = os.path.join(dataset_dir, 'val')

datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range = 15,
    vertical_flip = True,
    fill_mode = 'nearest'
)

train_generator = datagen.flow_from_directory(
    train_dir,
    target_size = (128,128),
    color_mode = 'rgb',
    class_mode = 'categorical',
    batch_size = 16
)

validation_generator = datagen.flow_from_directory(
    validation_dir,
    target_size = (128,128),
    color_mode = 'rgb',
    class_mode = 'categorical',
    batch_size = 16
)

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch,logs= {}):
    if(logs.get('accuracy') >= 0.99):
      print ("accuracy sudah mencapai 98%")
      self.model.stop_training = True

width_shape = 128
height_shape = 128

image = Input(shape=(width_shape, height_shape, 3))
base_model = ResNet152V2(input_tensor=image, include_top=False, weights='imagenet')

base_model.summary()

modelResnet3= tf.keras.models.Sequential([
    base_model,
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(1150, activation ='relu'),
    tf.keras.layers.Dropout(0,8),
    tf.keras.layers.Dense(950, activation ='relu'),
    tf.keras.layers.Dropout(0,7),
    tf.keras.layers.Dense(750, activation ='relu'),
    tf.keras.layers.Dropout(0,5),
    tf.keras.layers.Dense(512, activation ='relu'),
    tf.keras.layers.Dropout(0,5),
    #tf.keras.layers.Dense(350, activation ='relu'),
    #tf.keras.layers.Dropout(0,3),
    #tf.keras.layers.Dense(32, activation ='relu'),
    #tf.keras.layers.Dropout(0,5),
    tf.keras.layers.Dense(7, activation = 'softmax')
])

base_model.trainable = False

modelResnet3.summary()

optimizer = tf.keras.optimizers.RMSprop(learning_rate=0.000001)
modelResnet3.compile (loss = 'categorical_crossentropy',
               optimizer = optimizer,
               metrics = ['accuracy'])

history = modelResnet3.fit (
    train_generator,
    epochs=100,
    validation_data= validation_generator,
    batch_size = 16,
    verbose = 2,
    callbacks = [myCallback()]
)

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

import matplotlib.image as mimg
import matplotlib.pyplot as plt

acc = (history.history['accuracy'])
val_acc = (history.history['val_accuracy'])
loss = (history.history['loss'])
val_loss = (history.history['val_loss'])

plt.figure(figsize = (16,8))
plt.subplot(1,2,1)

plt.plot(acc, label = 'Akurasi Training')
plt.plot(val_acc, label = 'Akurasi validasi')
plt.title = ('Training and Validation Accuracy')
plt.xlabel('Epoch')
plt.ylabel('accuracy')
plt.legend(loc = 'upper left')

plt.subplot(1,2,2)
plt.plot(loss, label = 'Loss Training')
plt.plot(val_loss, label = 'Loss validasi')
plt.title = ('Training and Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('loss')
plt.legend(loc = 'upper left')

plt.show()

export_dir = 'model/'
tf.saved_model.save(modelResnet3, export_dir)

converter = tf.lite.TFLiteConverter.from_saved_model(export_dir)
tflite_model = converter.convert()

tflite_model_file = pathlib.Path('modelresnet.tflite')
tflite_model_file.write_bytes(tflite_model)